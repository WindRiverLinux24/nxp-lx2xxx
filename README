		NXP LX2XXX BSP


1. About this document
======================
This document describes the common and non-hardware specific information.
Please refer to README.hardware for hardware specific information.

Dependencies
------------
This layer depends on the oe-core version supplied with linux-yocto kernel.

Maintenance
-----------
This layer is maintained by Wind River Systems, Inc.
Contact <support@windriver.com> or your support representative for more
information on submitting changes.

Building the nxp-lx2xxx layer
-----------------------------
This layer should be added to bblayers.conf. This is done automatically
when using the Wind River setup.sh wrapper.

License
-------
Copyright (C) 2024 Wind River Systems, Inc.

The right to copy, distribute or otherwise make use of this software may
be licensed only pursuant to the terms of an applicable Wind River license
agreement. No license to Wind River intellectual properly rights is granted
herein. All rights not licensed by Wind River are reserved by Wind River.

Source code included in tree for individual recipes is under the LICENSE
stated in each recipe (.bb file) unless other stated.


2. BSP Kernel and Distros
=========================

The following table summarizes the valid Wind River Linux distros for this BSP.
'Y' in each content cell stands for supported; 'N' stands for not supported:

  +--------------+-------------+------------------+-------------------+--------------+
  | valid/distro |   wrlinux   | wrlinux-graphics | wrlinux-installer | wrlinux-tiny |
  +--------------+-------------+------------------+-------------------+--------------+
  |    valid     |      Y      |        N         |         N         |       N      |
  +--------------+-------------+------------------+-------------------+--------------+

For the supported kernel type for this BSP, please check the TARGET_SUPPORTED_KTYPES
by running 'bitbake -e virtual/kernel | grep "^TARGET_SUPPORTED_KTYPES="'.

Note: The preempt-rt kernel type can be used with this BSP/Machine.


3. Board Specific Patches
=========================

To get a list of patches applied to the kernel specific to this BSP
along with patch descriptions use git whatchanged on the default
kernel (git whatchanged <kernel_type>..<bsp_name>). For example:

  # cd tmp-glibc/work-shared/<bsp_name>/kernel-source
  # git whatchanged v6.6/standard/base..v6.6/standard/nxp-sdk-6.6/nxp-soc


4. Boot Instructions
====================

The typical u-boot settings apply to these boards. You will need to use
setenv, printenv and saveenv, to configure, display and store respectively
your network configuration details and kernel command line. In order to
TFTP a kernel, you need at a minimum to set the following:

	- ipaddr
	- gatewayip
	- netmask
	- serverip
	- loadaddr
	- dtbfile
	- dtbaddr
	- ethaddr
	- eth1addr

Your board may ship with the values for the MAC address of the Ethernet
interfaces set to the defaults compiled into the u-boot image. You should
set the ethaddr, eth1addr and so on as per the manufacturer assigned values,
usually indicated with a sticker on the board.

Target specifics are usually set in the "bootargs" variable, and the kernel
image is set in the "bootfile" variable. Don't forget that if you want these
values to be available after a power cycle you will need to run the saveenv
command.

Typically convenience macros exist that will create a complete bootargs
command line for the kernel based on variables that contain individual
settings. Since these macros exist as env variables themselves, they may
or may not be present depending on who installed and configured u-boot for
the board.

The console device for the board is ttyAMA0(UART1) at 115200 baud. For the DTB
address, 0x90000000 was used with success by Wind River. The load address
must be high enough to not interfere with kernel decompression. A value of
0xa0000000 was used with success for all kernels tested by Wind River.

4.1 NFS Root File System
------------------------

Example settings for the monitor (u-boot) are shown below:

nfsboot=setenv bootargs root=/dev/nfs rw nfsroot=$serverip:$rootpath \
ip=$ipaddr:$serverip:$gatewayip:$netmask:$hostname:$netdev:off \
console=$consoledev,$baudrate $othbootargs;
ethaddr=00:04:9F:02:00:FD
eth1addr=00:04:9F:02:01:FD
eth2addr=00:04:9F:02:02:FD
loadaddr=0xa0000000
fdtaddr=0x90000000
gatewayip=192.168.1.1
netmask=255.255.255.0
ipaddr=192.168.1.100
serverip=192.168.1.2
netdev=ni0
ethact=DPMAC17@rgmii-id
ethprime=DPMAC17@rgmii-id
bootfile=Image
fdtfile=fsl-lx2160a-rdb.dtb
rootpath=/tftpboot/rootfs
consoledev=ttyAMA0
baudrate=115200


5. Program NXP bootloader image
===============================

5.1. On-Board NOR Flash vbank Configuration
-------------------------------------------

Depending on on-board switch configuration for FLEXSPI flash; software
boots from DEV#0 and DEV#1. The default on-board switch configuration
boots the board from DEV#0. The board can boot from DEV#1 by using the
qixis_reset altbank command from the DEV#0 u-boot prompt.

The RDB comes pre-loaded with all binaries in DEV#0.
Users are able to program images in 2 separate virtual flash banks (DEV#0
and DEV#1). Images in DEV#0 are locked to prevent accidental erasure or
corruption. Initially, the same images are also programmed in DEV#1. This
bank is not locked so users have the option to download and program new
images into DEV#1 as needed. The instructions below list commands to
download images to DEV#1 and to boot from DEV#1.


5.2. NXP bootloader image
-------------------------

WRLinux product provides a solution to build bootloader image which contains
U-Boot, RCW, etc. Please refer to section 12 to build NXP bootloader image.

After building, the bootloader image (firmware_lx2160ardb-rev2_uboot_<boot-type>.img)
is generated in directory <building-path>/tmp-glibc/deploy/images/nxp-lx2xxx.

And then burn it to the target board under the U-Boot prompt using the commands below:

 => sf probe 0:1;
 => tftp 0xa0000000 firmware_lx2160ardb_rev2_uboot_xspiboot.img
 => sf erase 0 +$filesize;sf write 0xa0000000 0 $filesize

 => qixis_reset altbank
to switch to DEV#1

Note: if you want to program the DEV#0, please firstly change to DEV#1,
then use the above steps to program the pre-built image to #DEV0. After
burn of the image, use the following command to boot from #DEV0.
 => reset
Please be very careful when load those binaries to flash.

5.3. FlexSPI NOR Flash Chip-select
----------------------------------

On the LX2160ARDB revisions 2.0, switch SW1 bits 6-8 to control which bank
the SoC loads from when it powers up. The relevant values are:

Switch Settings 	NOR CS
off off off 		Load from NOR Flash Dev#0
off off on 		Load from NOR Flash Dev#1

5.4. NXP's SDK user manual
--------------------------

To get more details about above descriptions, please refer to instructions
mentioned in the sections

	"3.8 Layerscape LDP memory layout and userland"
and
	"3.7.10 Quick start guide for LX2160ARDB Rev2"

in the NXP's SDK user manual

	"UG10081_LLDP_6.1.55_2.2.0.pdf".


6. Creating Partitioned Images(WIC)
===================================

User can use the OpenEmbedded Image Creator, wic, to create the properly
partitioned image on a SD card. The wic command generates partitioned
images from existing OpenEmbedded build artifacts. User can refer to the
below URL to get more WIC details:

https://docs.yoctoproject.org/dev-manual/wic.html

This BSP supports disk images for SD card.
After build the project, user will get a WIC image under the directory
tmp-glibc/deploy/images/<bsp name>/, such as:

tmp-glibc/deploy/images/nxp-lx2xxx/wrlinux-image-std-nxp-lx2xxx.wic

Then user can write the output image to a SD card.

6.1 Burn images to SD card
--------------------------

To burn images to SD card, user needs to follow two steps:

1) Generate WIC image with NXP bootloader

WRLinux product provides a solution to build WIC image with NXP bootloader.
Please refer to section 12 for the detailed description.
After building, the WIC image(wrlinux-image-std-nxp-lx2xxx.wic) is generated
in directory <building-path>/build/tmp-glibc/deploy/images/nxp-lx2xxx.

2) Burn WIC image

# dd if=wrlinux-image-std-nxp-lx2xxx.wic of=/dev/your_sd_dev

6.2 Set uboot env
-----------------

Board can boot automatically by set the below uboot environment variables:

=> setenv bootfile Image; setenv fdtfile fsl-lx2160a-rdb.dtb
=> setenv loadaddr 0xa0000000; setenv fdtaddr 0x90000000

=> setenv bootargs 'console=ttyAMA0,115200 earlycon=pl011,mmio32,0x21c0000
 root=/dev/mmcblk0p2 rw no_console_suspend ip=dhcp'

If loading DPL from SD card
=> setenv bootcmd 'mmc read 0x80d00000 0x6800 0x800;
 fsl_mc lazyapply dpl 0x80d00000; fatload mmc 0:1 $loadaddr $bootfile;
 fatload mmc 0:1 $fdtaddr $fdtfile; booti $loadaddr - $fdtaddr'

If loading DPL from FlexSPI NOR flash
=> setenv bootcmd 'sf probe 0:0; sf read 0x80d00000 0xd00000 0x100000;
 fsl_mc lazyapply dpl 0x80d00000; fatload mmc 0:1 $loadaddr $bootfile;
 fatload mmc 0:1 $fdtaddr $fdtfile; booti $loadaddr - $fdtaddr'

=> saveenv; run bootcmd;


7. Enable on-board network ports in kernel
==========================================

LX2160A-RDB Rev2.0 reference board contains 2 on-board 1G ports, 2 on-board
10G ports, 2 on-board 25G ports and 1 on-board 40G ports.

They can be found in u-boot as below:
DPMAC17@xgmii and DPMAC18@xgmii are 1G Copper ports,
DPMAC3@xgmii and DPMAC4@xgmii are 10G Copper ports.
DPMAC5@25g-aui and DPMAC6@25g-aui are 25G Optical ports.
DPMAC2@xlaui4 is 40G Optical port.

Refer to Layerscape LX2160A Reference Design Board
(https://www.nxp.com/design/design-center/software/qoriq-developer-resources/layerscape-lx2160a-reference-design-board:LX2160A-RDB),
LX2RDBKIT1-10-40 and LX2RDBKIT2-25G are listed for 10G/40G and 25G ports.

For DPMAC2 40G Ports:
40G-BASE-SR4 QSFP+ Optical Transceiver Module, 40Gbps multi-mode, 850nm
QSFP+ LAN Optical Cable, multi-mode, OM3 50/125, MPO Connector

For DPMAC5/6 25G Ports:
SFP-25G-SR Optical Transceiver Modules, 25Gbps multi-mode, 850nm
LAN Optical Cable, multi-mode, OM3 50/125, LC Duplex Connector

Please use compatible Optical Transceiver Modules and Optical Cables for
these ports.

These ports' status is controlled by DPL. Unfortunately, the DPL has NXP's
private license, Wind River Linux can't merge them. DPL is generated by dts
file, user can create the dts file using the below command on the board:

	# restool dprc generate-dpl dprc.1 > dpl-eth.19.dts

It enables the DPMAC17@xgmii port and DPMAC2@xlaui4 port by default.
So if user want to enable other ports in Wind River Linux, user can
update SDK's DPL's "connections" section manually:

	connections {
		connection@0{
			endpoint1 = "dpni@0";
			endpoint2 = "dpmac@17";
		};
	};


For instance, if user want to enable the first Optical port, can replace

			endpoint2 = "dpmac@17";
to
			endpoint2 = "DPMAC2@xlaui4";

Then generate a new DPL on Host:

dtc -I dts -O dtb dpl-eth.19.dts -o dpl.dtb

Upload this DPL to board and deploy it onto the board:

If boot from FlexSPI NOR flash
=> tftp 0xd0000000 <path>/dpl.dtb; sf probe 0:0; sf erase 0xd00000 +0xc0000
=> sf write 0xd0000000 0xd00000 0xc0000

If boot from SD card
=> tftp 0xd0000000 <path>/dpl.dtb; mmc dev 0; mmc write 0xd0000000 0x6800 0x800

To get more details about above descriptions, please refer to instructions
mentioned in the NXP's SDK user manual

	"3.7.10.5 Bringing up DPPA2 network interfaces"
in
	"UG10081_LLDP_6.1.55_2.2.0.pdf".

Note:
In above PDF file, section "3.7.10.5.3 Add and destroy network interfaces",
describe the steps about how to destroy network interfaces. But it is not
compatible with the latest sdk v6.6 kernel. It is need to add a command to
disconnect dprc and dpmac before unbind dpmac. Example as below:

Add a DPNI object and connect it to a DPMAC.
# ls-addni dpmac.18
Created interface: ni2 (object:dpni.2, endpoint: dpmac.18)

Display information about the newly created dpni.2 interface
# restool dpni info dpni.2

Destroy the existing interface
# restool dprc disconnect dprc.1 --endpoint=dpmac.18
# echo dpni.2 > /sys/bus/fsl-mc/drivers/fsl_dpaa2_eth/unbind
# restool dpni destroy dpni.2


8. kexec/kdump
==============

For discussion purposes, some useful terminology will be described here.

boot kernel - the first kernel that you start and supports kexec,
              from U-Boot for instance.
capture kernel - the kernel that you reboot into after a boot kernel crash.

To build the boot or capture kernel, use the following option with the configure
command for your project:

	--template=feature/kexec,feature/kdump

To reserve a memory region for the capture kernel, pass "crashkernel=512M"
via the U-Boot command line.

NOTES:
1. Use Image as a secondary kernel. It can be found in the directory
   tmp-glibc/deploy/images/nxp-lx2xxx/Image
2. 512 MB (the size of the memory reserved for crash kernel) is the
   recommended amount of memory. If you add more features to the kernel, you
   can increase this value to accommodate the capture kernel.

3. Kdump
   DPAA2 is unsupported in the 2nd kernel, so user can use a PCIe ethernet card
   to support the network feature in the 2nd kernel(e.g. mount NFS, scp).
   SMP is unsupported in the 2nd kernel, so user needs to append argument
   "maxcpus=1" in the 2nd kernel bootargs.
   Because the 2nd kernel runs under limited resource, it should not work as a
   "replacement" kernel. In contrast, the only purpose of the 2nd kernel is to
   collect the crashing information of the 1st kernel.

For more detailed information about kdump, please refer to
Documentation/kdump/kdump.txt in the kernel source tree.

9. DPDK
=======

By default, the DPDK user space package is not installed. In order to install
DPDK package to rootfs, please refer to wrlinux/templates/feature/dpdk/README.

10. LX2080A mode
================

Enable LX2080A mode by setting sw3[3] as 0. Detailed information, please refer
to "QorIQ LX2160A Reference Design Board Getting Started Guide" documentation.

If LX2160ARDB default dpl.dtb is used on LX2080A test, the below error messages
will be reported on kernel bootup:

[    3.697073] fsl_mc_dpio: probe of dpio.7 failed with error -34
[    3.703467] fsl_mc_dpio: probe of dpio.6 failed with error -34
[    3.709480] fsl_mc_dpio: probe of dpio.5 failed with error -34
[    3.715832] fsl_mc_dpio: probe of dpio.4 failed with error -34
[    3.721849] fsl_mc_dpio: probe of dpio.3 failed with error -34
[    3.727865] fsl_mc_dpio: probe of dpio.2 failed with error -34
[    3.734068] fsl_mc_dpio: probe of dpio.1 failed with error -34
[    3.740111] fsl_mc_dpio: probe of dpio.0 failed with error -34

Because LX2080A has just 8 CPU cores, but LX2160ARDB default dpl.dtb is for 16
CPU cores. You may ignore these error messages or change dpl.dtb as following
steps:

1. Generate default dpl.dts

# restool dprc generate-dpl dprc.1 > /dpl.dts

2. delete dpio@8, dpio@9, ..., dpio@15 in dpl.dts

3. Generate dpl.dts for LX2080A on host
# dtc -I dts -O dtb dpl.dts -o dpl.dtb

4. Upload this DPL to board and deploy it onto the board:

If boot from FlexSPI NOR flash
=> tftp 0xd0000000 <path>/dpl.dtb; sf probe 0:0; sf erase 0xd00000 +0xc0000
=> sf write 0xd0000000 0xd00000 0xc0000

If boot from SD card
=> tftp 0xd0000000 <path>/dpl.dtb; mmc dev 0; mmc write 0xd0000000 0x6800 0x800

11. Watchdog
============

For Lx2160A SBSA watchdog, the first interrupt is not enabled by default.
Setting sbsa-gwdt.action to 1 in U-Boot bootargs could enable it. Same as NXP
SDK, SBSA watchdog on LX2160A will not reset the kernel but get kernel panic.

12. Build Bootloader
===================

Because of license limitation, the NXP LX2XXX bootloader is not supported on
WRLinux product. But the necessary recipe files of building bootloader have
been integrated into WRLinux product. In this way, the customers can build
bootloader for NXP LX2XXX platform based on WRLinux product by themselves.
To build bootloader image for NXP LX2XXX platform, it only needs to add below
contents in local.conf file, and then build WRLinux image as usual.

	BB_NO_NETWORK = '0'
	ACCEPT_FSL_EULA = "1"
	CUSTOMER_BUILD_BOOTLOADER = "1"
	CUSTOMER_RECIPES:meta-qoriq += 'secure-boot-qoriq'
	CUSTOMER_RECIPES:meta-qoriq += 'u-boot-qoriq'
	CUSTOMER_RECIPES:meta-qoriq += 'qoriq-atf'
	CUSTOMER_RECIPES:freescale-layer += 'management-complex'
	CUSTOMER_RECIPES:freescale-layer += 'mc-utils'
	CUSTOMER_RECIPES:freescale-layer += 'ddr-phy'
	CUSTOMER_RECIPES:freescale-layer += 'uefi'
	CUSTOMER_RECIPES:freescale-layer += 'rcw'
	CUSTOMER_RECIPES:freescale-layer += 'ls2-phy'
	CUSTOMER_RECIPES:freescale-layer += 'inphi'
	CUSTOMER_RECIPES:freescale-layer += 'qoriq-cst-native'
	CUSTOMER_RECIPES:freescale-layer += 'qoriq-atf-tools-native'

Note: If customers want to integrate bootloader into their own product, they
      MUST consult NXP and their own legal department.

13. CAN
=======

Detail verification commands as below:

        # ip link set can0 up type can bitrate 800000
        # ip link set can1 up type can bitrate 800000
        # candump can0 &
        # cansend can1 5A1#11.22.33.44.55.66.77.88
        # ip -d -s link show can0
        # ip -d -s link show can1

If can0 dumps data from can1, CAN feature works fine.

14. RTC
=======

There are two RTCs on the LX2160ARDB. rtc0 is an external RTC, either PCF2129
(for board Rev.C or earlier) or PCF2131 (for board Rev.D or later). It is used
to set the system time but does not support wake-up functionality. rtc1 is the
FlexTimer (FTM), which supports wake-up functionality.
